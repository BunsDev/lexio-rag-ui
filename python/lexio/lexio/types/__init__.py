# generated by datamodel-codegen:
#   filename:  types.json
#   timestamp: 2025-01-22T21:41:55+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Literal, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Model(RootModel[Any]):
    root: Any


class Role(Enum):
    """
    The role of the message sender
    """

    assistant = 'assistant'
    user = 'user'


class Message(BaseModel):
    """
    Represents a message in the chat
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    role: Role = Field(..., title='role')
    """
    The role of the message sender
    """
    content: str = Field(..., title='content')
    """
    The content of the message
    """


class Type(Enum):
    html = 'html'
    markdown = 'markdown'
    pdf = 'pdf'


class Rect(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    top: int = Field(..., title='top')
    left: int = Field(..., title='left')
    width: int = Field(..., title='width')
    height: int = Field(..., title='height')


class PDFHighlight(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    page: int = Field(..., title='page')
    rect: Rect = Field(..., title='rect')
    comment: Optional[str] = Field(None, title='comment')


class RetrieveResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field___toStringTag_23: str = Field(
        ..., alias='__@toStringTag@23', title='__@toStringTag@23'
    )


class GenerateInput(RootModel[List[Message]]):
    root: List[Message]


class AsyncIterableGenerateStreamChunk(RootModel[Any]):
    root: Any


class PromiseString(RootModel[Any]):
    root: Any


class Record(RootModel[Any]):
    root: Any


class Uint8Array(RootModel[Any]):
    root: Any


class BaseSourceContent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metadata: Optional[Record] = Field(None, title='metadata')


class BaseRetrievalResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sourceName: Optional[str] = Field(None, title='sourceName')
    relevanceScore: Optional[int] = Field(None, title='relevanceScore')
    metadata: Optional[Record] = Field(None, title='metadata')
    highlights: Optional[List[PDFHighlight]] = Field(None, title='highlights')


class SourceReference(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Optional[Type] = Field(None, title='type') # todo replace enum 
    sourceReference: str = Field(..., title='sourceReference')
    sourceName: Optional[str] = Field(None, title='sourceName')
    relevanceScore: Optional[int] = Field(None, title='relevanceScore')
    metadata: Optional[Record] = Field(None, title='metadata')
    highlights: Optional[List[PDFHighlight]] = Field(None, title='highlights')


class TextContent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    text: str = Field(..., title='text')
    sourceName: Optional[str] = Field(None, title='sourceName')
    relevanceScore: Optional[int] = Field(None, title='relevanceScore')
    metadata: Optional[Record] = Field(None, title='metadata')
    highlights: Optional[List[PDFHighlight]] = Field(None, title='highlights')


class MarkdownSourceContent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    content: str = Field(..., title='content')
    type: Literal['markdown'] = Field(..., title='type')
    metadata: Optional[Record] = Field(None, title='metadata')


class HTMLSourceContent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    content: str = Field(..., title='content')
    type: Literal['html'] = Field(..., title='type')
    metadata: Optional[Record] = Field(None, title='metadata')


class PDFSourceContent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    content: Uint8Array = Field(..., title='content')
    type: Literal['pdf'] = Field(..., title='type')
    highlights: Optional[List[PDFHighlight]] = Field(None, title='highlights')
    metadata: Optional[Record] = Field(None, title='metadata')


class SourceContent(
    RootModel[Union[MarkdownSourceContent, HTMLSourceContent, PDFSourceContent]]
):
    root: Union[MarkdownSourceContent, HTMLSourceContent, PDFSourceContent] = Field(
        ..., title='SourceContent'
    )


class GenerateResponse(
    RootModel[Union[PromiseString, AsyncIterableGenerateStreamChunk]]
):
    root: Union[PromiseString, AsyncIterableGenerateStreamChunk] = Field(
        ..., title='GenerateResponse'
    )


class RetrievalResult(RootModel[Union[SourceReference, TextContent]]):
    root: Union[SourceReference, TextContent] = Field(..., title='RetrievalResult')
